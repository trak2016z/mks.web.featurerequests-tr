@using MKS.Web.Common
@using MKS.Web.Data.FeatureRequests.Model.Entity
@model MKS.Web.FeatureRequests.Model.Project.ProjectView

@{ 
    ViewBag.Title = "Project feature requests";
}

<div class="row">
    <div class="col-sm-12">
        <h3>Project "@Model.Name"</h3>
        <div class="form-horizontal">
            <div class="form-group">
                <label class="col-sm-2 control-label">Name</label>
                <div class="col-sm-10">
                    <p class="form-control-static">@Model.Name</p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-2 control-label">Description</label>
                <div class="col-sm-10">
                    <p class="form-control-static">@Model.Description</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="featureRequests">
    <h3>All feature requests</h3>
    <div class="row" data-bind="if: featureRequests">
        <div data-bind="foreach: featureRequests"
             class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
            <div class="panel panel-default">
                <div class="panel-heading" role="tab">
                    <h4 class="panel-title">
                        <a role="button"
                           data-toggle="collapse" 
                           data-parent="#accordion"
                           data-bind="attr: {'href': '#request-collapse-' + $index() }" 
                           href="#">
                            <span data-bind="text: name"></span>
                            <span class="pull-right">
                                <button class="btn btn-xs btn-danger" data-bind="click: $root.downvoteRequest, visible: canDownvote">
                                    <span class="glyphicon glyphicon-remove"></span>
                                </button>
                                <span class="badge badge-votes" data-bind="text: 'Votes: ' + votes()"></span>
                                <button class="btn btn-xs btn-success" data-bind="click: $root.upvoteRequest, visible: canUpvote ">
                                    <span class="glyphicon glyphicon-ok"></span>
                                </button>
                            </span>
                        </a>
                    </h4>
                </div>
                <div data-bind="attr: {'id': 'request-collapse-' + $index() }, event: { 'shown.bs.collapse': $parent.onRequestExpanded }" class="panel-collapse collapse" role="tabpanel">
                    <div class="panel-body">
                        <div class="row">
                            <p class="col-sm-12" data-bind="text: description"></p>
                        </div>
                        <h4>Comments:</h4>
                        @Html.Partial("Partials/_NewComment.cshtml")
                        @Html.Partial("Partials/_CommentsList.cshtml")
                    </div>
                </div>
            </div>
        </div>

        <div class="row" data-bind="ifnot: anyItems">
            <p>No requests yet! Be the first one to suggest a cool feature :)</p>
        </div>
    </div>

    @Html.Partial("Partials/_NewRequest.cshtml", Model)
</div>

@section scripts {
    <script>
        ko.validation.rules['nameUnique'] = {
            async: true,
            validator: function (val, parms, callback) {
                var defaults = {
                    url: '/api/featurerequests/isnameavailable',
                    type: 'POST',
                    data: JSON.stringify(val),
                    contentType: 'application/json',
                    success: function (data) {
                        callback(data);
                    }
                };

                var options = $.extend(defaults, parms);
                $.ajax(options);
            },
            message: 'Request with this name already exists.'
        };
        ko.validation.registerExtenders();

        var viewModel = ko.mapping.fromJSON('@Model.ToJson()');
        viewModel.refreshRequests = function () {
            $.getJSON(
                '/api/featurerequests/' + @Model.Id,
                function (data) {
                    viewModel.featureRequests(data);
                }
            );
        };

        viewModel.currentOpenRequestId = ko.observable(0);

        viewModel.onRequestExpanded = function(request) {
            viewModel.currentOpenRequestId(request.id());
            viewModel.newComment.requestId(request.id());
            viewModel.refreshComments(request.id());
        };

        viewModel.findRequestById = function(requestId) {
            return ko.utils.arrayFirst(viewModel.featureRequests(), function(request) {
                return request.id() == requestId;
            } || -1);
        };

        viewModel.refreshComments = function(requestId) {
            var request = viewModel.findRequestById(requestId);

            $.getJSON(
                '/api/comments/request/' + request.id(),
                function (data) {
                    //votes will change, make them observable
                    ko.utils.arrayForEach(data, function(item) {
                        item.votes = ko.observable(item.votes); 
                        item.currentUserVote = ko.observable(item.currentUserVote);
                    });
                    request.comments(data);
                }
            );
        };

        viewModel.refreshCommentVotes = function(comment) {
            $.getJSON(
                '/api/votes/comment/' + comment.id,
                function (data) {
                    comment.votes(data.votes);
                    comment.currentUserVote(data.currentUserVote)
                }
            );
        }

        viewModel.upvoteComment = function(comment) {
            MKS.Knockout.post('/api/votes/comment/' + comment.id + '/up', null, function() {
                viewModel.refreshCommentVotes(comment);
            });
        }

        viewModel.downvoteComment = function(comment) {
            MKS.Knockout.post('/api/votes/comment/' + comment.id + '/down', null, function() {
                viewModel.refreshCommentVotes(comment);
            });
        }

        viewModel.refreshRequestVotes = function(request) {
            $.getJSON(
                '/api/votes/featurerequest/' + request.id,
                function (data) {
                    request.votes(data.votes);
                    request.currentUserVote(data.currentUserVote)
                }
            );
        }

        viewModel.upvoteRequest = function(request) {
            MKS.Knockout.post('/api/votes/featurerequest/' + request.id + '/up', null, function() {
                viewModel.refreshRequestVotes(request);
            });
        }

        viewModel.downvoteRequest = function(featurerequest) {
            MKS.Knockout.post('/api/votes/featurerequest/' + request.id + '/down', null, function() {
                viewModel.refreshRequestVotes(request);
            });
        }

        viewModel.anyItems = ko.computed(function () {
            return this.featureRequests().length > 0;
        }, viewModel);

        $(document).ready(function () {
            //init partials before applying viewmodel
            initNewRequestPartial(viewModel);
            initNewCommentPartial(viewModel);
            initCommentsListPartial(viewModel);

            ko.applyBindings(viewModel, $("#featureRequests")[0]);
        })
    </script>
}

