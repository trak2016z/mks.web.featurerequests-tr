using MKS.Web.Common;
using MKS.Web.Data.FeatureRequests.Query;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace MKS.Web.FeatureRequests.Model.Components.DataGrid
{
    /// <summary>
    /// DataGrid view component configuration builder
    /// </summary>
    /// <typeparam name="TItem">Model type of items in the grid</typeparam>
    public class DataGridBuilder<TItem> where TItem : class, new()
    {
        private string _id;         //TODO: autogenerated? 
        private int _pageIndex = 1;
        private int _pageSize = 10;
        private string _cssClass;
        private string _sourceUrl;
        private string _orderBy;
        private SortDirection _orderDirection;
        private List<object> _items;
        private int _totalCount;

        private DataGridColumnsBuilder<TItem> _columns = new DataGridColumnsBuilder<TItem>();

        public static DataGridBuilder<TItem> Create()
        {
            return new DataGridBuilder<TItem>();    
        }

        public DataGridBuilder<TItem> Id(string id)
        {
            _id = id;
            return this;
        }
        public DataGridBuilder<TItem> PageIndex(int index)
        {
            _pageIndex = index;
            return this;
        }
        public DataGridBuilder<TItem> PageSize(int perPage)
        {
            _pageSize = perPage;
            return this;
        }
        public DataGridBuilder<TItem> Columns(Action<DataGridColumnsBuilder<TItem>> buildAction)
        {
            buildAction(_columns);
            return this;
        }
        public DataGridBuilder<TItem> CssClass(string cssClass)
        {
            _cssClass = cssClass;
            return this;
        }
        /// <summary>
        /// Source to fetch data from if grid is dynamic.
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        public DataGridBuilder<TItem> Source(string url)
        {
            _sourceUrl = url;
            return this;
        }
        /// <summary>
        /// Initial data to display or complete data set if grid is static.
        /// Paging is still available, just done fully client-side.
        /// </summary>
        /// <param name="items"></param>
        /// <param name="totalCount"></param>
        /// <returns></returns>
        public DataGridBuilder<TItem> Source(IEnumerable<TItem> items, int totalCount)
        {
            _items = items.Cast<object>().ToList();
            _totalCount = totalCount;
            return this;
        }
        public DataGridBuilder<TItem> OrderBy(Expression<Func<TItem, object>> property, SortDirection direction)
        {
            _orderBy = ExpressionHelper.GetMemberName(property);
            _orderDirection = direction;
            return this;
        }
        public DataGridBuilder<TItem> Items(IEnumerable<TItem> items)
        {
            _items = items.Cast<object>().ToList();
            return this;
        }
        public DataGridBuilder<TItem> TotalCount(int totalCount)
        {
            _totalCount = totalCount;
            return this;
        }

        public DataGridModel Build()
        {
            return new DataGridModel()
            {
                Id = _id,
                PageIndex = _pageIndex,
                PageSize = _pageSize,
                Columns = _columns.Build(),
                Items = _items,
                OrderBy = _orderBy,
                OrderDirection = _orderDirection,
                SourceUrl = _sourceUrl,
                TotalCount = _totalCount
            };
        }
    }
}
